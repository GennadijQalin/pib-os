
Занятие 2 OK02

Занятие OK02 основанно на OK01, заставляя светодиод «OK» или «ACT» многократно включаться и выключаться. Предполагается, что у вас есть код для операционной системы Занятия 1: OK01 в качестве основы.
1 Ожидание

Ожидание - удивительно полезная часть разработки операционной системы. Часто операционные системы оказываются ни с чем не связанными и вынуждены медлить (делать задержки). В этом примере мы хотим сделать это для того, чтобы светодиод мигал и светился. Если бы вы просто выключили и включили его, его не было бы видно, как компьютер мог бы выключать и включать его много тысяч раз в секунду. В последующих занятиях мы рассмотрим точное ожидание,но пока достаточно просто терять время.

mov r2,#0x3F0000
wait1$:
sub r2,#1
cmp r2,#0
bne wait1$

sub reg,#val вычитает число val из значения в reg.

cmp reg,#val сравнивает значение в reg с числовым значением.

Суффикс ne вызывает выполнение команды только в том случае, если последнее сравнение определило, что числа не равны.

Приведенный выше код-это общий фрагмент кода, который создает задержку, которая благодаря тому, что каждый Raspberry Pi в основном одинаков, составляющее примерно одно и то же время. Это происходит, используя команду mov, чтобы поместить значение 3F000016 в r2, а затем вычесть 1 из этого значения, пока оно не станет 0. Новые команды здесь: sub, cmp и bne.

sub - это команда вычитания, которая просто вычитает второй аргумент из первого.

cmp - более интересная команда. Она сравнивает первый аргумент со вторым и запоминает результат сравнения в специальном регистре, который называется текущим регистром состояния процессора. Вам действительно не нужно беспокоиться об этом, достаточно сказать, что он помнит, какое из двух чисел было больше или меньше, или если они были равны.[1]

На самом деле bne - это просто замаскированная команда ветки. В семействе языков ассемблера ARM любая инструкция может выполняться условно. Это означает, что инструкция запускается только в том случае, если последнее сравнение дало определенный результат. Это означает, что инструкция запускается только в том случае, если последнее сравнение дало определенный результат. Суффикс ne может использоваться в любой команде, как и несколько других (всего 16) условий, таких как eq для равенства и lt для меньше, чем.
2 Все вместе

В прошлый раз я кратко упомянул, что индикатор состояния можно снова выключить, записав значение смещения 28 из контроллера GPIO вместо 40 (т.е. str r1, [r0, # 28]). Таким образом, вам нужно изменить код из OK01, чтобы включить светодиод, запустить код ожидания, выключить его, снова запустить код ожидания, а затем включить переход обратно в начало. Обратите внимание, нет необходимости повторно включать вывод на GPIO 16, нам нужно сделать это только один раз. Если вы действуете эффективно, то я настоятельно вам советую, иметь возможность повторно использовать значение r1. Как и во всех уроках, полное решение этой проблемы можно найти на странице загрузки. Будьте внимательны и убедитесь, что все ваши метки уникальны. Когда вы пишете wait1$, то вы не можете пометить другую строку wait1$.

На моем Raspberry Pi он мигает примерно два раза в секунду. Это можно легко изменить, изменив значение, которое мы установили для r2. Однако, к сожалению, мы не можем точно предсказать скорость, с которой он работает. Если вам не удалось заставить это работать, то см. Нашу страницу устранения неполадок, в противном случае поздравляем.

В этом уроке мы узнали еще две команды сборки, sub и cmp, а также узнали об условном выполнении в ARM.

В следующем занятии, Занятие 3: OK03, мы оценим, как мы пишем код, и установим некоторые стандарты, чтобы мы могли повторно использовать код и, при необходимости, работать с кодом на языке C (примечание переводчика: я хочу избавиться от C++).

    [1]^ Полагаю, если вы перешли по ссылке, вы действительно хотите узнать об этом. CPSR - это 32-битный регистр, состоящий из множества отдельных битовых полей. Он имеет битовые поля для положительного, нулевого и отрицательного. Когда выдается инструкция cmp, она вычитает второй аргумент из первого и записывает, является ли он положительным, нулевым или отрицательным с этими полями. Ноль означает, что числа были равны (a-b = 0 подразумевает a = b), положительное означает, что a больше, чем b (a-b> 0 подразумевает a> b), а отрицательное - меньше, чем b (правка переводчика). Существует множество других инструкций сравнения, но cmp является наиболее интуитивно понятным.

Обнаружили ошибку? Вы можете помочь этому учебнику на GitHub.

Creative Commons Licence
Baking Pi: Operating Systems Development by Alex Chadwick is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License.

Based on contributions at https://github.com/chadderz121/bakingpi-www.
 
Переводчик этого курса на русский язык Калин Геннадий Геннадьевич, Краснодар.
