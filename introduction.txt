 


Занятие 0. Вступление"


Это вступительное занятие не содержит практических элементов, но оно существует для того, что бы объяснить основные концепции операционной системы, и что такое ассемблер , и другие основы. Если вы просто хотите приступить к практике, то вы спокойно можете пропустить это занятие.

1 Операционные Системы

 По всему этому учебнику, я буду помещать интересную информацию в блоки подобные этому.

 По всему этому учебнику, я буду помещать интересную информацию в блоки подобные этому

Операционная система - это просто очень сложная программа Она организует работу других программ на компьютере, включая распределение машинного времени, памяти, аппаратного обеспечения и других ресурсов. Некоторые большие семейства операционных систем для настольных ПК, о которых вы, возможно, слышали, включают GNU/Linux, Mac OS X and Microsoft Windows. Другие устройства, так же нуждаются в операционных системах, как например телефоны, которые могут использовать операционные системы такие как: Android, iOS и Windows Phone. [1]


Поскольку операционная система должна взаимодействовать с аппаратным обеспечением компьютера, она также должна иметь конкретные знания об оборудовании в системе. Чтобы можно было использовать операционные системы на различных компьютерах, были изобретеныдрайвера. Драйверы - это небольшие кусочки кода, которые можно добавлять и удалять из операционной системы, чтобы операционная система могла взаимодействовать с определенным аппаратным обеспечением, т.е. оборудованием компьютера.. В этом курсе мы не охватим, как создавать такие переносимые драйверы, а вместо этого сосредоточимся на создании конкретных для Raspberry Pi.

Существуют самые разные дизайны операционных систем, и этот курс может лишь коснуться их. В этом курсе мы главным образом сосредоточимся на том, чтобы операционная система взаимодействовала с аппаратным обеспечением компьютера, так как это зачастую самая сложная часть и часть, для которой существует минимум документации и справки.
2 Код ассемблера.

Процессор зачастую может выполнять миллионы инструкций в секунду, но они должны быть простыми.

Этот курс будет испоользовать почти исключительно ассемблер. Ассемблерный код, это очень низкоуровневый код, который близок к непосредственно машинному коду процессора. На самом деле компьютер работает так: есть небольшое устройство, называемое процессором, которое способно выполнять простые арифметико-логические задачи, такие как сложение чисел, и есть набор из одного или нескольких микрочипов, называемых оперативной памятью (RAM), которые способны хранить числа. Когда компьютер получил питание, процессор выполняет последовательность инструкций, данных ему программистом, которые заставляют его изменять числа в ОЗУ (RAM) и взаимодействовать с подключенным оборудованием.. Ассемблерный код - это перевод машинного кода, единиц и нулей в удобочитаемый текст.

Обычно программист пишет код на высокоуровневом языке программирования таком как: C++, Java, C#, Basic и другие..., а затем программа сборки которая называется компилятором, переводит код, в код на ассемблере, который в свою очередь транслируется непосредвенно в двоичный машинный код. [2]. Двоичный код - это то, что непосредственно выполняет компьютер, но людям его тяжело прочитать, и он не является переносимым, как код написанный на высокоуровневом языке программирования. Ассемблерный код намного более удобен для чтения и понимания человеком, чем машинный код, но менее удобен чем языки программирования высокого уровня. Помните, что каждая команда, которую вы пишете на языке ассемблера, является мнемоникой машинных команд, которые процессор понимает напрямую, поэтому команды.
Процесс компилирования (сборки).

Так же как и с обычными языками программирования, существует много различных языков ассемблера, однако в отличии от обычных языков программирования причина появления множества языков ассемблеразависит в большей степени от разных архитектур и моделей процессоров. Существуют так же разные языки ассемблера для одной и той же архитектуры . Поэтому, программа, написанная на ассемблере для одной архитектуры, не будет работать на другой, например программа написанная на FASM не будет работать на ARM Поэтому и появились языки высокого уровня. Для операционных систем это не такая большая проблема, потому что код который управляет процессором одной архитектуры, все равно придется заменять, при портировании ОС на другую архитектуру процессора. Большинство операционных систем написано на C ++ или C, чтобы их было легче портировать на другую архитектуру, и только те разделы, которые обязательно должны быть написаны на ассемблере, написаны на нем. Обычно ради скорости выполнения.

Теперь вы готовы перейти к первому уроку, Lesson 1: OK01

    [1]^ For a more complete list of Operating Systems see List of operating systems - Wikipedia, the free encyclopaedia
    [2]^ I am, of course, simplifying this explanation of ordinary programming, in truth it depends heavily on the language and the machine. For the interested, see Compiler - Wikipedia, the free encyclopedia

Обнаружили ошибку? Вы можете помочь этому учебнику на GitHub.

Creative Commons Licence
Baking Pi: Operating Systems Development by Alex Chadwick is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License.

Based on contributions at https://github.com/chadderz121/bakingpi-www.


Переводчик этого курса на русский язык Калин Геннадий Геннадьевич, Краснодар.
